{"name": "test_open_punch_in", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x116c333+65459]\n\tGetHandleVerifier [0x0x116c374+65524]\n\t(No symbol) [0x0xf8d973]\n\t(No symbol) [0x0xfd76e7]\n\t(No symbol) [0x0xfd7a8b]\n\t(No symbol) [0x0x101dea2]\n\t(No symbol) [0x0xff9e44]\n\t(No symbol) [0x0x101b606]\n\t(No symbol) [0x0xff9bf6]\n\t(No symbol) [0x0xfcb38e]\n\t(No symbol) [0x0xfcc274]\n\tGetHandleVerifier [0x0x13eeda3+2697763]\n\tGetHandleVerifier [0x0x13e9ec7+2677575]\n\tGetHandleVerifier [0x0x1194194+228884]\n\tGetHandleVerifier [0x0x11849f8+165496]\n\tGetHandleVerifier [0x0x118b18d+192013]\n\tGetHandleVerifier [0x0x11747d8+99416]\n\tGetHandleVerifier [0x0x1174972+99826]\n\tGetHandleVerifier [0x0x115ebea+10346]\n\tBaseThreadInitThunk [0x0x76715d49+25]\n\tRtlInitializeExceptionChain [0x0x77ded6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x77ded661+561]", "trace": "self = <dashboard_test.TestDashboardPage object at 0x000002566EA6E990>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"303a22f96d8c57c73936d4fc33ace2ec\")>\n\n    def test_open_punch_in(self, driver):\n        dashboard_page = DashboardPage(driver)\n        dashboard_page.navigate_to()\n        dashboard_page.time_at_work_section.stop_watch_button.click()\n        punch_in_out = PunchInOutPage(driver)\n>       punch_in_out.punch_in_button.verify.exists()\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\dashboard_test.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nframework\\fields\\button_field.py:18: in verify\n    return VerifyButton(self)\n           ^^^^^^^^^^^^^^^^^^\nframework\\helpers\\verifications\\verify_base.py:7: in __init__\n    self.element = field.get_element()\n                   ^^^^^^^^^^^^^^^^^^^\nframework\\fields\\base_field.py:25: in get_element\n    current_element = self.wait(current_element).until(EC.presence_of_element_located(locator))\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"303a22f96d8c57c73936d4fc33ace2ec\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x000002566E13CB80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x116c333+65459]\nE       \tGetHandleVerifier [0x0x116c374+65524]\nE       \t(No symbol) [0x0xf8d973]\nE       \t(No symbol) [0x0xfd76e7]\nE       \t(No symbol) [0x0xfd7a8b]\nE       \t(No symbol) [0x0x101dea2]\nE       \t(No symbol) [0x0xff9e44]\nE       \t(No symbol) [0x0x101b606]\nE       \t(No symbol) [0x0xff9bf6]\nE       \t(No symbol) [0x0xfcb38e]\nE       \t(No symbol) [0x0xfcc274]\nE       \tGetHandleVerifier [0x0x13eeda3+2697763]\nE       \tGetHandleVerifier [0x0x13e9ec7+2677575]\nE       \tGetHandleVerifier [0x0x1194194+228884]\nE       \tGetHandleVerifier [0x0x11849f8+165496]\nE       \tGetHandleVerifier [0x0x118b18d+192013]\nE       \tGetHandleVerifier [0x0x11747d8+99416]\nE       \tGetHandleVerifier [0x0x1174972+99826]\nE       \tGetHandleVerifier [0x0x115ebea+10346]\nE       \tBaseThreadInitThunk [0x0x76715d49+25]\nE       \tRtlInitializeExceptionChain [0x0x77ded6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x77ded661+561]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "start": 1759012931748, "stop": 1759012944151, "uuid": "b8fd2bb8-a377-481d-b764-57a1d1aee60a", "historyId": "885074e6ef6506d6e7192cbe1e6b8247", "testCaseId": "885074e6ef6506d6e7192cbe1e6b8247", "fullName": "tests.dashboard_test.TestDashboardPage#test_open_punch_in", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "dashboard_test"}, {"name": "subSuite", "value": "TestDashboardPage"}, {"name": "host", "value": "MSI"}, {"name": "thread", "value": "32400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.dashboard_test"}], "titlePath": ["tests", "dashboard_test.py", "TestDashboardPage"]}